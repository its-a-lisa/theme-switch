// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yN3pGwAh9CWVe2LXGsETn
// Component: XCG5f5NQd_dT

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: FTebs6dNlwip/component
import Section1 from "../../Section1"; // plasmic-import: i3DJJXTFYngM/component
import Section2 from "../../Section2"; // plasmic-import: EW31KyjAcMc6/component
import Section3 from "../../Section3"; // plasmic-import: vPpVFzejwR8K/component
import Section4 from "../../Section4"; // plasmic-import: keQt-nLZ2Kai/component
import Section5 from "../../Section5"; // plasmic-import: EjbO80j2BGfQ/component
import Section6 from "../../Section6"; // plasmic-import: DMgmzHhKRhQs/component
import Section7 from "../../Section7"; // plasmic-import: a3lX_H-vXDSO/component
import Section8 from "../../Section8"; // plasmic-import: bRQSjf8wyRdv/component
import Section9 from "../../Section9"; // plasmic-import: jeYOUEs_KGam/component
import Footer from "../../Footer"; // plasmic-import: qRXzJyiRxOeS/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: B67dTyYcNNXN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9yN3pGwAh9CWVe2LXGsETn/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: XCG5f5NQd_dT/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  homepage?: Flex__<"div">;
  homepageWrapper?: Flex__<"div">;
  homepageHeader?: Flex__<typeof Header>;
  freeBox?: Flex__<"div">;
  section1?: Flex__<typeof Section1>;
  section2?: Flex__<typeof Section2>;
  section3?: Flex__<typeof Section3>;
  section4?: Flex__<typeof Section4>;
  section5?: Flex__<typeof Section5>;
  section6?: Flex__<typeof Section6>;
  section7?: Flex__<typeof Section7>;
  section8?: Flex__<typeof Section8>;
  section9?: Flex__<typeof Section9>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"homepage"}
          data-plasmic-override={overrides.homepage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.homepage,
            {
              [projectcss.global_theme_darkGrayscale]: hasVariant(
                globalVariants,
                "theme",
                "darkGrayscale"
              ),
              [projectcss.global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [projectcss.global_theme_grayscale]: hasVariant(
                globalVariants,
                "theme",
                "grayscale"
              )
            }
          )}
        >
          <div
            data-plasmic-name={"homepageWrapper"}
            data-plasmic-override={overrides.homepageWrapper}
            className={classNames(projectcss.all, sty.homepageWrapper)}
          >
            <Header
              data-plasmic-name={"homepageHeader"}
              data-plasmic-override={overrides.homepageHeader}
              className={classNames("__wab_instance", sty.homepageHeader)}
            />

            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <Section1
                data-plasmic-name={"section1"}
                data-plasmic-override={overrides.section1}
                className={classNames("__wab_instance", sty.section1)}
              />

              <Section2
                data-plasmic-name={"section2"}
                data-plasmic-override={overrides.section2}
                className={classNames("__wab_instance", sty.section2)}
              />

              <Section3
                data-plasmic-name={"section3"}
                data-plasmic-override={overrides.section3}
                className={classNames("__wab_instance", sty.section3)}
              />

              <Section4
                data-plasmic-name={"section4"}
                data-plasmic-override={overrides.section4}
                className={classNames("__wab_instance", sty.section4)}
              />

              <Section5
                data-plasmic-name={"section5"}
                data-plasmic-override={overrides.section5}
                className={classNames("__wab_instance", sty.section5)}
              />

              <Section6
                data-plasmic-name={"section6"}
                data-plasmic-override={overrides.section6}
                className={classNames("__wab_instance", sty.section6)}
              />

              <Section7
                data-plasmic-name={"section7"}
                data-plasmic-override={overrides.section7}
                className={classNames("__wab_instance", sty.section7)}
              />

              <Section8
                data-plasmic-name={"section8"}
                data-plasmic-override={overrides.section8}
                className={classNames("__wab_instance", sty.section8)}
              />

              <Section9
                data-plasmic-name={"section9"}
                data-plasmic-override={overrides.section9}
                className={classNames("__wab_instance", sty.section9)}
              />
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  homepage: [
    "homepage",
    "homepageWrapper",
    "homepageHeader",
    "freeBox",
    "section1",
    "section2",
    "section3",
    "section4",
    "section5",
    "section6",
    "section7",
    "section8",
    "section9",
    "footer"
  ],
  homepageWrapper: [
    "homepageWrapper",
    "homepageHeader",
    "freeBox",
    "section1",
    "section2",
    "section3",
    "section4",
    "section5",
    "section6",
    "section7",
    "section8",
    "section9",
    "footer"
  ],
  homepageHeader: ["homepageHeader"],
  freeBox: [
    "freeBox",
    "section1",
    "section2",
    "section3",
    "section4",
    "section5",
    "section6",
    "section7",
    "section8",
    "section9"
  ],
  section1: ["section1"],
  section2: ["section2"],
  section3: ["section3"],
  section4: ["section4"],
  section5: ["section5"],
  section6: ["section6"],
  section7: ["section7"],
  section8: ["section8"],
  section9: ["section9"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  homepage: "div";
  homepageWrapper: "div";
  homepageHeader: typeof Header;
  freeBox: "div";
  section1: typeof Section1;
  section2: typeof Section2;
  section3: typeof Section3;
  section4: typeof Section4;
  section5: typeof Section5;
  section6: typeof Section6;
  section7: typeof Section7;
  section8: typeof Section8;
  section9: typeof Section9;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "homepage") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("homepage"),
  {
    // Helper components rendering sub-elements
    homepageWrapper: makeNodeComponent("homepageWrapper"),
    homepageHeader: makeNodeComponent("homepageHeader"),
    freeBox: makeNodeComponent("freeBox"),
    section1: makeNodeComponent("section1"),
    section2: makeNodeComponent("section2"),
    section3: makeNodeComponent("section3"),
    section4: makeNodeComponent("section4"),
    section5: makeNodeComponent("section5"),
    section6: makeNodeComponent("section6"),
    section7: makeNodeComponent("section7"),
    section8: makeNodeComponent("section8"),
    section9: makeNodeComponent("section9"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
