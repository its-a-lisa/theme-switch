// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yN3pGwAh9CWVe2LXGsETn
// Component: vPpVFzejwR8K

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: BnvLdeoRxR94/component

import { useScreenVariants as useScreenVariantsoyx73T20ZbVx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Oyx73t20ZbVx/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: B67dTyYcNNXN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9yN3pGwAh9CWVe2LXGsETn/projectcss
import sty from "./PlasmicSection3.module.css"; // plasmic-import: vPpVFzejwR8K/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: SP8R6qNO03I1/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: WYWANJ9YeWQR/icon

createPlasmicElementProxy;

export type PlasmicSection3__VariantMembers = {};
export type PlasmicSection3__VariantsArgs = {};
type VariantPropType = keyof PlasmicSection3__VariantsArgs;
export const PlasmicSection3__VariantProps = new Array<VariantPropType>();

export type PlasmicSection3__ArgsType = {};
type ArgPropType = keyof PlasmicSection3__ArgsType;
export const PlasmicSection3__ArgProps = new Array<ArgPropType>();

export type PlasmicSection3__OverridesType = {
  section3?: Flex__<"section">;
  twoSideBox?: Flex__<"div">;
  columns?: Flex__<"div">;
  subHeading2?: Flex__<"h2">;
  peraContent?: Flex__<"p">;
  unorderList?: Flex__<"ul">;
  listIteam?: Flex__<"li">;
  listIteam3?: Flex__<"li">;
  listIteam4?: Flex__<"li">;
  listIteam5?: Flex__<"li">;
  listIteam6?: Flex__<"li">;
  listIteam7?: Flex__<"li">;
  listIteam8?: Flex__<"li">;
  button?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  bannerImage2?: Flex__<"div">;
  imageMarketing2?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultSection3Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSection3__RenderFunc(props: {
  variants: PlasmicSection3__VariantsArgs;
  args: PlasmicSection3__ArgsType;
  overrides: PlasmicSection3__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsoyx73T20ZbVx(),
    theme: useTheme()
  });

  return (
    <section
      data-plasmic-name={"section3"}
      data-plasmic-override={overrides.section3}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.section3,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"twoSideBox"}
        data-plasmic-override={overrides.twoSideBox}
        className={classNames(projectcss.all, sty.twoSideBox)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__byEM)}>
          <div className={classNames(projectcss.all, sty.freeBox__m3Vum)}>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__kbTxS)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___1ZijT)}
                >
                  <h2
                    data-plasmic-name={"subHeading2"}
                    data-plasmic-override={overrides.subHeading2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      sty.subHeading2
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xjOs
                      )}
                    >
                      {"What you'll learn"}
                    </div>
                    <p
                      data-plasmic-name={"peraContent"}
                      data-plasmic-override={overrides.peraContent}
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.peraContent
                      )}
                    >
                      {"How this course will take you from zero to hero:"}
                    </p>
                    <ul
                      data-plasmic-name={"unorderList"}
                      data-plasmic-override={overrides.unorderList}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.unorderList
                      )}
                    >
                      <li
                        data-plasmic-name={"listIteam"}
                        data-plasmic-override={overrides.listIteam}
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.listIteam
                        )}
                      >
                        {"Describe some topic covered in this info product."}
                      </li>
                      <li
                        data-plasmic-name={"listIteam3"}
                        data-plasmic-override={overrides.listIteam3}
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.listIteam3
                        )}
                      >
                        {"Describe some topic covered in this info product."}
                      </li>
                      <li
                        data-plasmic-name={"listIteam4"}
                        data-plasmic-override={overrides.listIteam4}
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.listIteam4
                        )}
                      >
                        {"Describe some topic covered in this info product."}
                      </li>
                      <li
                        data-plasmic-name={"listIteam5"}
                        data-plasmic-override={overrides.listIteam5}
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.listIteam5
                        )}
                      >
                        {"Describe some topic covered in this info product."}
                      </li>
                      <li
                        data-plasmic-name={"listIteam6"}
                        data-plasmic-override={overrides.listIteam6}
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.listIteam6
                        )}
                      >
                        {"Describe some topic covered in this info product."}
                      </li>
                      <li
                        data-plasmic-name={"listIteam7"}
                        data-plasmic-override={overrides.listIteam7}
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.listIteam7
                        )}
                      >
                        {"Describe some topic covered in this info product."}
                      </li>
                      <li
                        data-plasmic-name={"listIteam8"}
                        data-plasmic-override={overrides.listIteam8}
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.listIteam8
                        )}
                      >
                        {"Describe some topic covered in this info product."}
                      </li>
                    </ul>
                  </h2>
                </div>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={undefined}
                  end={
                    <Icon4Icon
                      data-plasmic-name={"svg"}
                      data-plasmic-override={overrides.svg}
                      className={classNames(projectcss.all, sty.svg)}
                      role={"img"}
                    />
                  }
                  iconEnd={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eb7Ef
                      )}
                    >
                      {"Start learning"}
                    </div>
                  }
                  roundedFull={true}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__r80F)}>
                <div
                  data-plasmic-name={"bannerImage2"}
                  data-plasmic-override={overrides.bannerImage2}
                  className={classNames(projectcss.all, sty.bannerImage2)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"imageMarketing2"}
                    data-plasmic-override={overrides.imageMarketing2}
                    alt={""}
                    className={classNames(sty.imageMarketing2)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "auto"
                        : "100%"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "400px"
                        : "100%"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/theme_switcher/images/image.png",
                      fullWidth: 1600,
                      fullHeight: 1200,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section3: [
    "section3",
    "twoSideBox",
    "columns",
    "subHeading2",
    "peraContent",
    "unorderList",
    "listIteam",
    "listIteam3",
    "listIteam4",
    "listIteam5",
    "listIteam6",
    "listIteam7",
    "listIteam8",
    "button",
    "svg",
    "bannerImage2",
    "imageMarketing2"
  ],
  twoSideBox: [
    "twoSideBox",
    "columns",
    "subHeading2",
    "peraContent",
    "unorderList",
    "listIteam",
    "listIteam3",
    "listIteam4",
    "listIteam5",
    "listIteam6",
    "listIteam7",
    "listIteam8",
    "button",
    "svg",
    "bannerImage2",
    "imageMarketing2"
  ],
  columns: [
    "columns",
    "subHeading2",
    "peraContent",
    "unorderList",
    "listIteam",
    "listIteam3",
    "listIteam4",
    "listIteam5",
    "listIteam6",
    "listIteam7",
    "listIteam8",
    "button",
    "svg",
    "bannerImage2",
    "imageMarketing2"
  ],
  subHeading2: [
    "subHeading2",
    "peraContent",
    "unorderList",
    "listIteam",
    "listIteam3",
    "listIteam4",
    "listIteam5",
    "listIteam6",
    "listIteam7",
    "listIteam8"
  ],
  peraContent: ["peraContent"],
  unorderList: [
    "unorderList",
    "listIteam",
    "listIteam3",
    "listIteam4",
    "listIteam5",
    "listIteam6",
    "listIteam7",
    "listIteam8"
  ],
  listIteam: ["listIteam"],
  listIteam3: ["listIteam3"],
  listIteam4: ["listIteam4"],
  listIteam5: ["listIteam5"],
  listIteam6: ["listIteam6"],
  listIteam7: ["listIteam7"],
  listIteam8: ["listIteam8"],
  button: ["button", "svg"],
  svg: ["svg"],
  bannerImage2: ["bannerImage2", "imageMarketing2"],
  imageMarketing2: ["imageMarketing2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  section3: "section";
  twoSideBox: "div";
  columns: "div";
  subHeading2: "h2";
  peraContent: "p";
  unorderList: "ul";
  listIteam: "li";
  listIteam3: "li";
  listIteam4: "li";
  listIteam5: "li";
  listIteam6: "li";
  listIteam7: "li";
  listIteam8: "li";
  button: typeof Button;
  svg: "svg";
  bannerImage2: "div";
  imageMarketing2: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection3__VariantsArgs;
    args?: PlasmicSection3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSection3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSection3__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSection3__ArgProps,
          internalVariantPropNames: PlasmicSection3__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSection3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section3") {
    func.displayName = "PlasmicSection3";
  } else {
    func.displayName = `PlasmicSection3.${nodeName}`;
  }
  return func;
}

export const PlasmicSection3 = Object.assign(
  // Top-level PlasmicSection3 renders the root element
  makeNodeComponent("section3"),
  {
    // Helper components rendering sub-elements
    twoSideBox: makeNodeComponent("twoSideBox"),
    columns: makeNodeComponent("columns"),
    subHeading2: makeNodeComponent("subHeading2"),
    peraContent: makeNodeComponent("peraContent"),
    unorderList: makeNodeComponent("unorderList"),
    listIteam: makeNodeComponent("listIteam"),
    listIteam3: makeNodeComponent("listIteam3"),
    listIteam4: makeNodeComponent("listIteam4"),
    listIteam5: makeNodeComponent("listIteam5"),
    listIteam6: makeNodeComponent("listIteam6"),
    listIteam7: makeNodeComponent("listIteam7"),
    listIteam8: makeNodeComponent("listIteam8"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    bannerImage2: makeNodeComponent("bannerImage2"),
    imageMarketing2: makeNodeComponent("imageMarketing2"),

    // Metadata about props expected for PlasmicSection3
    internalVariantProps: PlasmicSection3__VariantProps,
    internalArgProps: PlasmicSection3__ArgProps
  }
);

export default PlasmicSection3;
/* prettier-ignore-end */
