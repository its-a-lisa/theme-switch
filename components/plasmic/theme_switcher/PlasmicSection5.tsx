// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yN3pGwAh9CWVe2LXGsETn
// Component: EjbO80j2BGfQ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: B67dTyYcNNXN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9yN3pGwAh9CWVe2LXGsETn/projectcss
import sty from "./PlasmicSection5.module.css"; // plasmic-import: EjbO80j2BGfQ/css

createPlasmicElementProxy;

export type PlasmicSection5__VariantMembers = {};
export type PlasmicSection5__VariantsArgs = {};
type VariantPropType = keyof PlasmicSection5__VariantsArgs;
export const PlasmicSection5__VariantProps = new Array<VariantPropType>();

export type PlasmicSection5__ArgsType = {};
type ArgPropType = keyof PlasmicSection5__ArgsType;
export const PlasmicSection5__ArgProps = new Array<ArgPropType>();

export type PlasmicSection5__OverridesType = {
  section5?: Flex__<"section">;
  twoSidedContent?: Flex__<"div">;
  subHeading3?: Flex__<"h2">;
  line2?: Flex__<"div">;
  columns?: Flex__<"div">;
};

export interface DefaultSection5Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSection5__RenderFunc(props: {
  variants: PlasmicSection5__VariantsArgs;
  args: PlasmicSection5__ArgsType;
  overrides: PlasmicSection5__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <section
      data-plasmic-name={"section5"}
      data-plasmic-override={overrides.section5}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.section5,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"twoSidedContent"}
        data-plasmic-override={overrides.twoSidedContent}
        className={classNames(projectcss.all, sty.twoSidedContent)}
      >
        <h2
          data-plasmic-name={"subHeading3"}
          data-plasmic-override={overrides.subHeading3}
          className={classNames(
            projectcss.all,
            projectcss.h2,
            projectcss.__wab_text,
            sty.subHeading3
          )}
        >
          {"Curriculum Overview"}
        </h2>
        <div
          data-plasmic-name={"line2"}
          data-plasmic-override={overrides.line2}
          className={classNames(projectcss.all, sty.line2)}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column___7RZdr)}>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__te0R7
              )}
            >
              {"Chapter Title"}
            </h2>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__zm2FH
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
              }
            </p>
          </div>
          <div className={classNames(projectcss.all, sty.column__nsf03)}>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__v2KCx
              )}
            >
              {"Chapter Title"}
            </h2>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__rFKul
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
              }
            </p>
          </div>
          <div className={classNames(projectcss.all, sty.column__woSUx)}>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__blz8T
              )}
            >
              {"Chapter Title"}
            </h2>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__dx8Hg
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
              }
            </p>
          </div>
          <div className={classNames(projectcss.all, sty.column__a5Uvr)}>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__jeZn
              )}
            >
              {"Chapter Title"}
            </h2>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__lclPu
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
              }
            </p>
          </div>
          <div className={classNames(projectcss.all, sty.column__xrBrb)}>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__ztytL
              )}
            >
              {"Chapter Title"}
            </h2>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__qnTfA
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
              }
            </p>
          </div>
          <div className={classNames(projectcss.all, sty.column___1Be3U)}>
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__yAkxF
              )}
            >
              {"Chapter Title"}
            </h2>
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__j2Okq
              )}
            >
              {
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
              }
            </p>
          </div>
        </Stack__>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section5: ["section5", "twoSidedContent", "subHeading3", "line2", "columns"],
  twoSidedContent: ["twoSidedContent", "subHeading3", "line2", "columns"],
  subHeading3: ["subHeading3"],
  line2: ["line2"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  section5: "section";
  twoSidedContent: "div";
  subHeading3: "h2";
  line2: "div";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection5__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection5__VariantsArgs;
    args?: PlasmicSection5__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSection5__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSection5__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSection5__ArgProps,
          internalVariantPropNames: PlasmicSection5__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSection5__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section5") {
    func.displayName = "PlasmicSection5";
  } else {
    func.displayName = `PlasmicSection5.${nodeName}`;
  }
  return func;
}

export const PlasmicSection5 = Object.assign(
  // Top-level PlasmicSection5 renders the root element
  makeNodeComponent("section5"),
  {
    // Helper components rendering sub-elements
    twoSidedContent: makeNodeComponent("twoSidedContent"),
    subHeading3: makeNodeComponent("subHeading3"),
    line2: makeNodeComponent("line2"),
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicSection5
    internalVariantProps: PlasmicSection5__VariantProps,
    internalArgProps: PlasmicSection5__ArgProps
  }
);

export default PlasmicSection5;
/* prettier-ignore-end */
