// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yN3pGwAh9CWVe2LXGsETn
// Component: DMgmzHhKRhQs

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: BnvLdeoRxR94/component

import { useScreenVariants as useScreenVariantsoyx73T20ZbVx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Oyx73t20ZbVx/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: B67dTyYcNNXN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9yN3pGwAh9CWVe2LXGsETn/projectcss
import sty from "./PlasmicSection6.module.css"; // plasmic-import: DMgmzHhKRhQs/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: SP8R6qNO03I1/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: WYWANJ9YeWQR/icon

createPlasmicElementProxy;

export type PlasmicSection6__VariantMembers = {};
export type PlasmicSection6__VariantsArgs = {};
type VariantPropType = keyof PlasmicSection6__VariantsArgs;
export const PlasmicSection6__VariantProps = new Array<VariantPropType>();

export type PlasmicSection6__ArgsType = {};
type ArgPropType = keyof PlasmicSection6__ArgsType;
export const PlasmicSection6__ArgProps = new Array<ArgPropType>();

export type PlasmicSection6__OverridesType = {
  section6?: Flex__<"section">;
  twoSideBox2?: Flex__<"div">;
  columns?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  subHeading4?: Flex__<"h2">;
  peraContent2?: Flex__<"p">;
  unorderList2?: Flex__<"ul">;
  listIteam2?: Flex__<"li">;
  listIteam9?: Flex__<"li">;
  listIteam10?: Flex__<"li">;
  listIteam11?: Flex__<"li">;
  listIteam12?: Flex__<"li">;
  listIteam13?: Flex__<"li">;
  button?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  bannerImage3?: Flex__<"div">;
  imageMarketing3?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultSection6Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSection6__RenderFunc(props: {
  variants: PlasmicSection6__VariantsArgs;
  args: PlasmicSection6__ArgsType;
  overrides: PlasmicSection6__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsoyx73T20ZbVx(),
    theme: useTheme()
  });

  return (
    <section
      data-plasmic-name={"section6"}
      data-plasmic-override={overrides.section6}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.section6,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"twoSideBox2"}
        data-plasmic-override={overrides.twoSideBox2}
        className={classNames(projectcss.all, sty.twoSideBox2)}
      >
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__hyT0)}>
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <h2
                data-plasmic-name={"subHeading4"}
                data-plasmic-override={overrides.subHeading4}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  sty.subHeading4
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iv2On
                  )}
                >
                  {"Practical exercises"}
                </div>
                <p
                  data-plasmic-name={"peraContent2"}
                  data-plasmic-override={overrides.peraContent2}
                  className={classNames(
                    projectcss.all,
                    projectcss.p,
                    projectcss.__wab_text,
                    sty.peraContent2
                  )}
                >
                  {"How you'll implement what you learn"}
                </p>
                <ul
                  data-plasmic-name={"unorderList2"}
                  data-plasmic-override={overrides.unorderList2}
                  className={classNames(
                    projectcss.all,
                    projectcss.ul,
                    sty.unorderList2
                  )}
                >
                  <li
                    data-plasmic-name={"listIteam2"}
                    data-plasmic-override={overrides.listIteam2}
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.listIteam2
                    )}
                  >
                    {"Describe a practice exercise."}
                  </li>
                  <li
                    data-plasmic-name={"listIteam9"}
                    data-plasmic-override={overrides.listIteam9}
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.listIteam9
                    )}
                  >
                    {"Describe a practice exercise."}
                  </li>
                  <li
                    data-plasmic-name={"listIteam10"}
                    data-plasmic-override={overrides.listIteam10}
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.listIteam10
                    )}
                  >
                    {"Describe a practice exercise."}
                  </li>
                  <li
                    data-plasmic-name={"listIteam11"}
                    data-plasmic-override={overrides.listIteam11}
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.listIteam11
                    )}
                  >
                    {"Describe a practice exercise."}
                  </li>
                  <li
                    data-plasmic-name={"listIteam12"}
                    data-plasmic-override={overrides.listIteam12}
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.listIteam12
                    )}
                  >
                    {"Describe a practice exercise."}
                  </li>
                  <li
                    data-plasmic-name={"listIteam13"}
                    data-plasmic-override={overrides.listIteam13}
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.listIteam13
                    )}
                  >
                    {"Describe a practice exercise."}
                  </li>
                </ul>
              </h2>
            </div>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              color={undefined}
              end={
                <Icon4Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              }
              iconEnd={true}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7AM8C
                  )}
                >
                  {"Start learning"}
                </div>
              }
              roundedFull={true}
            />
          </div>
          <div className={classNames(projectcss.all, sty.column__wPXwR)}>
            <div
              data-plasmic-name={"bannerImage3"}
              data-plasmic-override={overrides.bannerImage3}
              className={classNames(projectcss.all, sty.bannerImage3)}
            >
              <PlasmicImg__
                data-plasmic-name={"imageMarketing3"}
                data-plasmic-override={overrides.imageMarketing3}
                alt={""}
                className={classNames(sty.imageMarketing3)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "auto"
                    : "100%"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "400px"
                    : "100%"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/theme_switcher/images/image.png",
                  fullWidth: 1600,
                  fullHeight: 1200,
                  aspectRatio: undefined
                }}
              />
            </div>
          </div>
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section6: [
    "section6",
    "twoSideBox2",
    "columns",
    "freeBox",
    "subHeading4",
    "peraContent2",
    "unorderList2",
    "listIteam2",
    "listIteam9",
    "listIteam10",
    "listIteam11",
    "listIteam12",
    "listIteam13",
    "button",
    "svg",
    "bannerImage3",
    "imageMarketing3"
  ],
  twoSideBox2: [
    "twoSideBox2",
    "columns",
    "freeBox",
    "subHeading4",
    "peraContent2",
    "unorderList2",
    "listIteam2",
    "listIteam9",
    "listIteam10",
    "listIteam11",
    "listIteam12",
    "listIteam13",
    "button",
    "svg",
    "bannerImage3",
    "imageMarketing3"
  ],
  columns: [
    "columns",
    "freeBox",
    "subHeading4",
    "peraContent2",
    "unorderList2",
    "listIteam2",
    "listIteam9",
    "listIteam10",
    "listIteam11",
    "listIteam12",
    "listIteam13",
    "button",
    "svg",
    "bannerImage3",
    "imageMarketing3"
  ],
  freeBox: [
    "freeBox",
    "subHeading4",
    "peraContent2",
    "unorderList2",
    "listIteam2",
    "listIteam9",
    "listIteam10",
    "listIteam11",
    "listIteam12",
    "listIteam13"
  ],
  subHeading4: [
    "subHeading4",
    "peraContent2",
    "unorderList2",
    "listIteam2",
    "listIteam9",
    "listIteam10",
    "listIteam11",
    "listIteam12",
    "listIteam13"
  ],
  peraContent2: ["peraContent2"],
  unorderList2: [
    "unorderList2",
    "listIteam2",
    "listIteam9",
    "listIteam10",
    "listIteam11",
    "listIteam12",
    "listIteam13"
  ],
  listIteam2: ["listIteam2"],
  listIteam9: ["listIteam9"],
  listIteam10: ["listIteam10"],
  listIteam11: ["listIteam11"],
  listIteam12: ["listIteam12"],
  listIteam13: ["listIteam13"],
  button: ["button", "svg"],
  svg: ["svg"],
  bannerImage3: ["bannerImage3", "imageMarketing3"],
  imageMarketing3: ["imageMarketing3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  section6: "section";
  twoSideBox2: "div";
  columns: "div";
  freeBox: "div";
  subHeading4: "h2";
  peraContent2: "p";
  unorderList2: "ul";
  listIteam2: "li";
  listIteam9: "li";
  listIteam10: "li";
  listIteam11: "li";
  listIteam12: "li";
  listIteam13: "li";
  button: typeof Button;
  svg: "svg";
  bannerImage3: "div";
  imageMarketing3: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection6__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection6__VariantsArgs;
    args?: PlasmicSection6__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSection6__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSection6__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSection6__ArgProps,
          internalVariantPropNames: PlasmicSection6__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSection6__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section6") {
    func.displayName = "PlasmicSection6";
  } else {
    func.displayName = `PlasmicSection6.${nodeName}`;
  }
  return func;
}

export const PlasmicSection6 = Object.assign(
  // Top-level PlasmicSection6 renders the root element
  makeNodeComponent("section6"),
  {
    // Helper components rendering sub-elements
    twoSideBox2: makeNodeComponent("twoSideBox2"),
    columns: makeNodeComponent("columns"),
    freeBox: makeNodeComponent("freeBox"),
    subHeading4: makeNodeComponent("subHeading4"),
    peraContent2: makeNodeComponent("peraContent2"),
    unorderList2: makeNodeComponent("unorderList2"),
    listIteam2: makeNodeComponent("listIteam2"),
    listIteam9: makeNodeComponent("listIteam9"),
    listIteam10: makeNodeComponent("listIteam10"),
    listIteam11: makeNodeComponent("listIteam11"),
    listIteam12: makeNodeComponent("listIteam12"),
    listIteam13: makeNodeComponent("listIteam13"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    bannerImage3: makeNodeComponent("bannerImage3"),
    imageMarketing3: makeNodeComponent("imageMarketing3"),

    // Metadata about props expected for PlasmicSection6
    internalVariantProps: PlasmicSection6__VariantProps,
    internalArgProps: PlasmicSection6__ArgProps
  }
);

export default PlasmicSection6;
/* prettier-ignore-end */
