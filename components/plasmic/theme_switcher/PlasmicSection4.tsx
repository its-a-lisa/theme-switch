// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yN3pGwAh9CWVe2LXGsETn
// Component: keQt-nLZ2Kai

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: B67dTyYcNNXN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9yN3pGwAh9CWVe2LXGsETn/projectcss
import sty from "./PlasmicSection4.module.css"; // plasmic-import: keQt-nLZ2Kai/css

createPlasmicElementProxy;

export type PlasmicSection4__VariantMembers = {};
export type PlasmicSection4__VariantsArgs = {};
type VariantPropType = keyof PlasmicSection4__VariantsArgs;
export const PlasmicSection4__VariantProps = new Array<VariantPropType>();

export type PlasmicSection4__ArgsType = {};
type ArgPropType = keyof PlasmicSection4__ArgsType;
export const PlasmicSection4__ArgProps = new Array<ArgPropType>();

export type PlasmicSection4__OverridesType = {
  section4?: Flex__<"section">;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  testimonialText?: Flex__<"h2">;
  position?: Flex__<"p">;
};

export interface DefaultSection4Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSection4__RenderFunc(props: {
  variants: PlasmicSection4__VariantsArgs;
  args: PlasmicSection4__ArgsType;
  overrides: PlasmicSection4__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <section
      data-plasmic-name={"section4"}
      data-plasmic-override={overrides.section4}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.section4,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__bR5Bt)}>
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column___0AIe)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"256px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"256px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/theme_switcher/images/image7.png",
                fullWidth: 1112,
                fullHeight: 794,
                aspectRatio: undefined
              }}
            />
          </div>
          <div className={classNames(projectcss.all, sty.column__sYyVg)}>
            <div className={classNames(projectcss.all, sty.freeBox__op2CI)}>
              <h2
                data-plasmic-name={"testimonialText"}
                data-plasmic-override={overrides.testimonialText}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.testimonialText
                )}
              >
                {
                  "\u201cThis course is a must-take for anyone in digital marketing. Worth every penny.\u201d"
                }
              </h2>
              <p
                data-plasmic-name={"position"}
                data-plasmic-override={overrides.position}
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.position
                )}
              >
                {"Jane Doe, Sr. Marketing Manager at Company"}
              </p>
            </div>
          </div>
        </div>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section4: ["section4", "columns", "img", "testimonialText", "position"],
  columns: ["columns", "img", "testimonialText", "position"],
  img: ["img"],
  testimonialText: ["testimonialText"],
  position: ["position"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  section4: "section";
  columns: "div";
  img: typeof PlasmicImg__;
  testimonialText: "h2";
  position: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection4__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection4__VariantsArgs;
    args?: PlasmicSection4__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSection4__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSection4__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSection4__ArgProps,
          internalVariantPropNames: PlasmicSection4__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSection4__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section4") {
    func.displayName = "PlasmicSection4";
  } else {
    func.displayName = `PlasmicSection4.${nodeName}`;
  }
  return func;
}

export const PlasmicSection4 = Object.assign(
  // Top-level PlasmicSection4 renders the root element
  makeNodeComponent("section4"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    testimonialText: makeNodeComponent("testimonialText"),
    position: makeNodeComponent("position"),

    // Metadata about props expected for PlasmicSection4
    internalVariantProps: PlasmicSection4__VariantProps,
    internalArgProps: PlasmicSection4__ArgProps
  }
);

export default PlasmicSection4;
/* prettier-ignore-end */
