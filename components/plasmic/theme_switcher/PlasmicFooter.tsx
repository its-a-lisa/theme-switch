// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yN3pGwAh9CWVe2LXGsETn
// Component: qRXzJyiRxOeS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: B67dTyYcNNXN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9yN3pGwAh9CWVe2LXGsETn/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: qRXzJyiRxOeS/css

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  footer?: Flex__<"footer">;
  footerLogo?: Flex__<"div">;
  logo2?: Flex__<typeof PlasmicImg__>;
  footerLink?: Flex__<"a"> & Partial<LinkProps>;
  footerLink2?: Flex__<"a"> & Partial<LinkProps>;
  footerLink4?: Flex__<"a"> & Partial<LinkProps>;
  footerLink5?: Flex__<"a"> & Partial<LinkProps>;
  copyRight?: Flex__<"p">;
  socialIcons?: Flex__<"div">;
  twitter?: Flex__<typeof PlasmicImg__>;
  facebook?: Flex__<typeof PlasmicImg__>;
  youtube?: Flex__<typeof PlasmicImg__>;
  vimeo?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <footer
      data-plasmic-name={"footer"}
      data-plasmic-override={overrides.footer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.footer,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.columns__kzoH)}>
        <div className={classNames(projectcss.all, sty.column___74LVs)}>
          <div
            data-plasmic-name={"footerLogo"}
            data-plasmic-override={overrides.footerLogo}
            className={classNames(projectcss.all, sty.footerLogo)}
          >
            <PlasmicImg__
              data-plasmic-name={"logo2"}
              data-plasmic-override={overrides.logo2}
              alt={""}
              className={classNames(sty.logo2)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"300px"}
              loading={"lazy"}
              src={{
                src: "/plasmic/theme_switcher/images/image9.png",
                fullWidth: 374,
                fullHeight: 156,
                aspectRatio: undefined
              }}
            />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__x9VGo)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__lmqYs
            )}
          >
            {"Company"}
          </h3>
          <PlasmicLink__
            data-plasmic-name={"footerLink"}
            data-plasmic-override={overrides.footerLink}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.footerLink
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"Story"}
          </PlasmicLink__>
          <PlasmicLink__
            data-plasmic-name={"footerLink2"}
            data-plasmic-override={overrides.footerLink2}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.footerLink2
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"Pricing"}
          </PlasmicLink__>
        </div>
        <div className={classNames(projectcss.all, sty.column__mjxQm)}>
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3___3AZ8H
            )}
          >
            {"Legal"}
          </h3>
          <PlasmicLink__
            data-plasmic-name={"footerLink4"}
            data-plasmic-override={overrides.footerLink4}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.footerLink4
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"Terms & Conditions"}
          </PlasmicLink__>
          <PlasmicLink__
            data-plasmic-name={"footerLink5"}
            data-plasmic-override={overrides.footerLink5}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.footerLink5
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"Privacy Policy"}
          </PlasmicLink__>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___4Sgye)}>
        <div className={classNames(projectcss.all, sty.columns__lKlQ5)}>
          <div className={classNames(projectcss.all, sty.column__oZHvt)}>
            <p
              data-plasmic-name={"copyRight"}
              data-plasmic-override={overrides.copyRight}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.copyRight
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "\u00a9 Company. All rights reserved. This site proudly built with "
                  }
                </React.Fragment>
                {
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__jrZnb
                    )}
                    component={Link}
                    href={"https://www.plasmic.app"}
                    platform={"nextjs"}
                  >
                    {"Plasmic"}
                  </PlasmicLink__>
                }
                <React.Fragment>{"."}</React.Fragment>
              </React.Fragment>
            </p>
          </div>
          <div className={classNames(projectcss.all, sty.column__gBCnk)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"socialIcons"}
              data-plasmic-override={overrides.socialIcons}
              hasGap={true}
              className={classNames(projectcss.all, sty.socialIcons)}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__a8SQ
                )}
                component={Link}
                href={"https://twitter.com/"}
                platform={"nextjs"}
                target={"_blank"}
              >
                <PlasmicImg__
                  data-plasmic-name={"twitter"}
                  data-plasmic-override={overrides.twitter}
                  alt={""}
                  className={classNames(sty.twitter)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/theme_switcher/images/icons8TwitterSvg.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__s1Rhh
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
                target={"_blank"}
              >
                <PlasmicImg__
                  data-plasmic-name={"facebook"}
                  data-plasmic-override={overrides.facebook}
                  alt={""}
                  className={classNames(sty.facebook)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/theme_switcher/images/icons8FacebookSvg.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___09OzE
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
                target={"_blank"}
              >
                <PlasmicImg__
                  data-plasmic-name={"youtube"}
                  data-plasmic-override={overrides.youtube}
                  alt={""}
                  className={classNames(sty.youtube)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/theme_switcher/images/icons8YoutubeSvg.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__csKQg
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___0AbDg)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"vimeo"}
                    data-plasmic-override={overrides.vimeo}
                    alt={""}
                    className={classNames(sty.vimeo)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"30px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/theme_switcher/images/icons8VimeoSvg.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </PlasmicLink__>
            </Stack__>
          </div>
        </div>
      </div>
    </footer>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footer: [
    "footer",
    "footerLogo",
    "logo2",
    "footerLink",
    "footerLink2",
    "footerLink4",
    "footerLink5",
    "copyRight",
    "socialIcons",
    "twitter",
    "facebook",
    "youtube",
    "vimeo"
  ],
  footerLogo: ["footerLogo", "logo2"],
  logo2: ["logo2"],
  footerLink: ["footerLink"],
  footerLink2: ["footerLink2"],
  footerLink4: ["footerLink4"],
  footerLink5: ["footerLink5"],
  copyRight: ["copyRight"],
  socialIcons: ["socialIcons", "twitter", "facebook", "youtube", "vimeo"],
  twitter: ["twitter"],
  facebook: ["facebook"],
  youtube: ["youtube"],
  vimeo: ["vimeo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  footer: "footer";
  footerLogo: "div";
  logo2: typeof PlasmicImg__;
  footerLink: "a";
  footerLink2: "a";
  footerLink4: "a";
  footerLink5: "a";
  copyRight: "p";
  socialIcons: "div";
  twitter: typeof PlasmicImg__;
  facebook: typeof PlasmicImg__;
  youtube: typeof PlasmicImg__;
  vimeo: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footer"),
  {
    // Helper components rendering sub-elements
    footerLogo: makeNodeComponent("footerLogo"),
    logo2: makeNodeComponent("logo2"),
    footerLink: makeNodeComponent("footerLink"),
    footerLink2: makeNodeComponent("footerLink2"),
    footerLink4: makeNodeComponent("footerLink4"),
    footerLink5: makeNodeComponent("footerLink5"),
    copyRight: makeNodeComponent("copyRight"),
    socialIcons: makeNodeComponent("socialIcons"),
    twitter: makeNodeComponent("twitter"),
    facebook: makeNodeComponent("facebook"),
    youtube: makeNodeComponent("youtube"),
    vimeo: makeNodeComponent("vimeo"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
