// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yN3pGwAh9CWVe2LXGsETn
// Component: i3DJJXTFYngM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: BnvLdeoRxR94/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: B67dTyYcNNXN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9yN3pGwAh9CWVe2LXGsETn/projectcss
import sty from "./PlasmicSection1.module.css"; // plasmic-import: i3DJJXTFYngM/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: U4n_Jad29D64/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: SP8R6qNO03I1/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: WYWANJ9YeWQR/icon

createPlasmicElementProxy;

export type PlasmicSection1__VariantMembers = {};
export type PlasmicSection1__VariantsArgs = {};
type VariantPropType = keyof PlasmicSection1__VariantsArgs;
export const PlasmicSection1__VariantProps = new Array<VariantPropType>();

export type PlasmicSection1__ArgsType = {};
type ArgPropType = keyof PlasmicSection1__ArgsType;
export const PlasmicSection1__ArgProps = new Array<ArgPropType>();

export type PlasmicSection1__OverridesType = {
  section1?: Flex__<"section">;
  container?: Flex__<"div">;
  flexBox?: Flex__<"div">;
  bannerImage?: Flex__<"div">;
  contentBlock?: Flex__<"div">;
  mainHeading?: Flex__<"h1">;
  peraBanner?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  button?: Flex__<typeof Button>;
};

export interface DefaultSection1Props {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSection1__RenderFunc(props: {
  variants: PlasmicSection1__VariantsArgs;
  args: PlasmicSection1__ArgsType;
  overrides: PlasmicSection1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <section
      data-plasmic-name={"section1"}
      data-plasmic-override={overrides.section1}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.section1,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(projectcss.all, sty.container)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"flexBox"}
          data-plasmic-override={overrides.flexBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.flexBox)}
        >
          <div className={classNames(projectcss.all, sty.column__kOmy)}>
            <div
              data-plasmic-name={"bannerImage"}
              data-plasmic-override={overrides.bannerImage}
              className={classNames(projectcss.all, sty.bannerImage)}
            >
              <Icon5Icon
                className={classNames(projectcss.all, sty.svg__umSuy)}
                role={"img"}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column___8FaR)}>
            <div
              data-plasmic-name={"contentBlock"}
              data-plasmic-override={overrides.contentBlock}
              className={classNames(projectcss.all, sty.contentBlock)}
            >
              <h1
                data-plasmic-name={"mainHeading"}
                data-plasmic-override={overrides.mainHeading}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.mainHeading
                )}
              >
                {"The Ultimate Guide to High-Performance Landing Pages"}
              </h1>
              <div
                data-plasmic-name={"peraBanner"}
                data-plasmic-override={overrides.peraBanner}
                className={classNames(projectcss.all, sty.peraBanner)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bZv2H
                  )}
                >
                  {
                    "Your go-to guide for both B2B and B2C digital marketing pages.\n\nWe will share with you the hard-won tips and tricks we've gained from developing over 75 high-converting landing pages clients across multiple industries. Everything from ad image and copy, to page design and conversion strategies are shared here in broad strokes for you to take home and deploy."
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={undefined}
                  end={
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__k7Dbt)}
                      role={"img"}
                    />
                  }
                  iconEnd={true}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6ACfa
                      )}
                    >
                      {"Access the course"}
                    </div>
                  }
                  roundedFull={true}
                  size={"extraLarge"}
                />
              </div>
            </div>
          </div>
        </Stack__>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  section1: [
    "section1",
    "container",
    "flexBox",
    "bannerImage",
    "contentBlock",
    "mainHeading",
    "peraBanner",
    "freeBox",
    "button"
  ],
  container: [
    "container",
    "flexBox",
    "bannerImage",
    "contentBlock",
    "mainHeading",
    "peraBanner",
    "freeBox",
    "button"
  ],
  flexBox: [
    "flexBox",
    "bannerImage",
    "contentBlock",
    "mainHeading",
    "peraBanner",
    "freeBox",
    "button"
  ],
  bannerImage: ["bannerImage"],
  contentBlock: [
    "contentBlock",
    "mainHeading",
    "peraBanner",
    "freeBox",
    "button"
  ],
  mainHeading: ["mainHeading"],
  peraBanner: ["peraBanner"],
  freeBox: ["freeBox", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  section1: "section";
  container: "div";
  flexBox: "div";
  bannerImage: "div";
  contentBlock: "div";
  mainHeading: "h1";
  peraBanner: "div";
  freeBox: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSection1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSection1__VariantsArgs;
    args?: PlasmicSection1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSection1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSection1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSection1__ArgProps,
          internalVariantPropNames: PlasmicSection1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSection1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "section1") {
    func.displayName = "PlasmicSection1";
  } else {
    func.displayName = `PlasmicSection1.${nodeName}`;
  }
  return func;
}

export const PlasmicSection1 = Object.assign(
  // Top-level PlasmicSection1 renders the root element
  makeNodeComponent("section1"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    flexBox: makeNodeComponent("flexBox"),
    bannerImage: makeNodeComponent("bannerImage"),
    contentBlock: makeNodeComponent("contentBlock"),
    mainHeading: makeNodeComponent("mainHeading"),
    peraBanner: makeNodeComponent("peraBanner"),
    freeBox: makeNodeComponent("freeBox"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicSection1
    internalVariantProps: PlasmicSection1__VariantProps,
    internalArgProps: PlasmicSection1__ArgProps
  }
);

export default PlasmicSection1;
/* prettier-ignore-end */
