// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yN3pGwAh9CWVe2LXGsETn
// Component: VCRlPui118LP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Header from "../../Header"; // plasmic-import: FTebs6dNlwip/component
import Section1 from "../../Section1"; // plasmic-import: i3DJJXTFYngM/component
import Section2 from "../../Section2"; // plasmic-import: EW31KyjAcMc6/component
import Section3 from "../../Section3"; // plasmic-import: vPpVFzejwR8K/component
import Section4 from "../../Section4"; // plasmic-import: keQt-nLZ2Kai/component
import Section5 from "../../Section5"; // plasmic-import: EjbO80j2BGfQ/component
import Section6 from "../../Section6"; // plasmic-import: DMgmzHhKRhQs/component
import Section7 from "../../Section7"; // plasmic-import: a3lX_H-vXDSO/component
import Section8 from "../../Section8"; // plasmic-import: bRQSjf8wyRdv/component
import Section9 from "../../Section9"; // plasmic-import: jeYOUEs_KGam/component
import Footer from "../../Footer"; // plasmic-import: qRXzJyiRxOeS/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: B67dTyYcNNXN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9yN3pGwAh9CWVe2LXGsETn/projectcss
import sty from "./PlasmicHomepageWrapper.module.css"; // plasmic-import: VCRlPui118LP/css

createPlasmicElementProxy;

export type PlasmicHomepageWrapper__VariantMembers = {};
export type PlasmicHomepageWrapper__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepageWrapper__VariantsArgs;
export const PlasmicHomepageWrapper__VariantProps =
  new Array<VariantPropType>();

export type PlasmicHomepageWrapper__ArgsType = {
  homepageWrapper2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepageWrapper__ArgsType;
export const PlasmicHomepageWrapper__ArgProps = new Array<ArgPropType>(
  "homepageWrapper2"
);

export type PlasmicHomepageWrapper__OverridesType = {
  homepageWrapper?: Flex__<"div">;
  homepageWrapperHeader?: Flex__<typeof Header>;
};

export interface DefaultHomepageWrapperProps {
  homepageWrapper2?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepageWrapper__RenderFunc(props: {
  variants: PlasmicHomepageWrapper__VariantsArgs;
  args: PlasmicHomepageWrapper__ArgsType;
  overrides: PlasmicHomepageWrapper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"homepageWrapper"}
      data-plasmic-override={overrides.homepageWrapper}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.homepageWrapper,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <Header
        data-plasmic-name={"homepageWrapperHeader"}
        data-plasmic-override={overrides.homepageWrapperHeader}
        className={classNames("__wab_instance", sty.homepageWrapperHeader)}
      />

      {renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <Header
              className={classNames("__wab_instance", sty.header__fo1T)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__vHjL8)}>
              <Section1
                className={classNames("__wab_instance", sty.section1__f7MQ)}
              />

              <Section2
                className={classNames("__wab_instance", sty.section2__sRqM6)}
              />

              <Section3
                className={classNames("__wab_instance", sty.section3__zJvYo)}
              />

              <Section4
                className={classNames("__wab_instance", sty.section4__rjBjb)}
              />

              <Section5
                className={classNames("__wab_instance", sty.section5__ois8R)}
              />

              <Section6
                className={classNames("__wab_instance", sty.section6__fvk6E)}
              />

              <Section7
                className={classNames("__wab_instance", sty.section7__szEAn)}
              />

              <Section8
                className={classNames("__wab_instance", sty.section8__aTUyS)}
              />

              <Section9
                className={classNames("__wab_instance", sty.section9__rsRHc)}
              />
            </div>
            <Footer
              className={classNames("__wab_instance", sty.footer__dAzNg)}
            />
          </React.Fragment>
        ),
        value: args.homepageWrapper2
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  homepageWrapper: ["homepageWrapper", "homepageWrapperHeader"],
  homepageWrapperHeader: ["homepageWrapperHeader"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  homepageWrapper: "div";
  homepageWrapperHeader: typeof Header;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepageWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepageWrapper__VariantsArgs;
    args?: PlasmicHomepageWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepageWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepageWrapper__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepageWrapper__ArgProps,
          internalVariantPropNames: PlasmicHomepageWrapper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepageWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "homepageWrapper") {
    func.displayName = "PlasmicHomepageWrapper";
  } else {
    func.displayName = `PlasmicHomepageWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepageWrapper = Object.assign(
  // Top-level PlasmicHomepageWrapper renders the root element
  makeNodeComponent("homepageWrapper"),
  {
    // Helper components rendering sub-elements
    homepageWrapperHeader: makeNodeComponent("homepageWrapperHeader"),

    // Metadata about props expected for PlasmicHomepageWrapper
    internalVariantProps: PlasmicHomepageWrapper__VariantProps,
    internalArgProps: PlasmicHomepageWrapper__ArgProps
  }
);

export default PlasmicHomepageWrapper;
/* prettier-ignore-end */
