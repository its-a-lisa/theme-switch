// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9yN3pGwAh9CWVe2LXGsETn
// Component: 8MLXY57WFMl9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ContactButton from "../../ContactButton"; // plasmic-import: NaJAEQrwQJhK/component
import Switch from "../../Switch"; // plasmic-import: haNGWtEmhTF3/component

import { useScreenVariants as useScreenVariantsoyx73T20ZbVx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Oyx73t20ZbVx/globalVariant
import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: B67dTyYcNNXN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 9yN3pGwAh9CWVe2LXGsETn/projectcss
import sty from "./PlasmicHeaderWrapper.module.css"; // plasmic-import: 8MLXY57WFMl9/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 8Wg8XCUKFspg/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: SP8R6qNO03I1/icon

createPlasmicElementProxy;

export type PlasmicHeaderWrapper__VariantMembers = {};
export type PlasmicHeaderWrapper__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeaderWrapper__VariantsArgs;
export const PlasmicHeaderWrapper__VariantProps = new Array<VariantPropType>();

export type PlasmicHeaderWrapper__ArgsType = {};
type ArgPropType = keyof PlasmicHeaderWrapper__ArgsType;
export const PlasmicHeaderWrapper__ArgProps = new Array<ArgPropType>();

export type PlasmicHeaderWrapper__OverridesType = {
  headerWrapperContainer?: Flex__<"div">;
  headerWrapperStack?: Flex__<"div">;
  headerWrapperNav?: Flex__<"div">;
  wrapperHome?: Flex__<typeof ContactButton>;
  wrapperAbout?: Flex__<typeof ContactButton>;
  wrapperThemeSwitch?: Flex__<typeof Switch>;
};

export interface DefaultHeaderWrapperProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeaderWrapper__RenderFunc(props: {
  variants: PlasmicHeaderWrapper__VariantsArgs;
  args: PlasmicHeaderWrapper__ArgsType;
  overrides: PlasmicHeaderWrapper__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "wrapperThemeSwitch.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $ctx.setDark;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsoyx73T20ZbVx(),
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"headerWrapperContainer"}
      data-plasmic-override={overrides.headerWrapperContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.headerWrapperContainer,
        {
          [projectcss.global_theme_darkGrayscale]: hasVariant(
            globalVariants,
            "theme",
            "darkGrayscale"
          ),
          [projectcss.global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),
          [projectcss.global_theme_grayscale]: hasVariant(
            globalVariants,
            "theme",
            "grayscale"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"headerWrapperStack"}
        data-plasmic-override={overrides.headerWrapperStack}
        hasGap={true}
        className={classNames(projectcss.all, sty.headerWrapperStack)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"headerWrapperNav"}
          data-plasmic-override={overrides.headerWrapperNav}
          hasGap={true}
          className={classNames(projectcss.all, sty.headerWrapperNav)}
        >
          <ContactButton
            data-plasmic-name={"wrapperHome"}
            data-plasmic-override={overrides.wrapperHome}
            className={classNames("__wab_instance", sty.wrapperHome)}
            color={"clear"}
            endIcon={
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__scppM)}
                role={"img"}
              />
            }
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__z3LJq)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___4EX
              )}
            >
              {"Home"}
            </div>
          </ContactButton>
          <ContactButton
            data-plasmic-name={"wrapperAbout"}
            data-plasmic-override={overrides.wrapperAbout}
            className={classNames("__wab_instance", sty.wrapperAbout)}
            color={"clear"}
            endIcon={
              <Icon4Icon
                className={classNames(projectcss.all, sty.svg___0OwRw)}
                role={"img"}
              />
            }
            startIcon={
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg__z6Ezr)}
                role={"img"}
              />
            }
            submitsForm={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cVxxQ
              )}
            >
              {"About"}
            </div>
          </ContactButton>
        </Stack__>
        {(() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.wrapperThemeSwitch),
            isChecked:
              generateStateValueProp($state, [
                "wrapperThemeSwitch",
                "isChecked"
              ]) ?? false,
            onChange: async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, [
                  "wrapperThemeSwitch",
                  "isChecked"
                ])(eventArgs[0]);
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }
          };

          initializePlasmicStates(
            $state,
            [
              {
                name: "wrapperThemeSwitch.isChecked",
                initFunc: ({ $props, $state, $queries }) =>
                  (() => {
                    try {
                      return $ctx.setDark;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
              }
            ],
            []
          );
          return (
            <Switch
              data-plasmic-name={"wrapperThemeSwitch"}
              data-plasmic-override={overrides.wrapperThemeSwitch}
              {...child$Props}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kyNi
                )}
              >
                {"Theme"}
              </div>
            </Switch>
          );
        })()}
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  headerWrapperContainer: [
    "headerWrapperContainer",
    "headerWrapperStack",
    "headerWrapperNav",
    "wrapperHome",
    "wrapperAbout",
    "wrapperThemeSwitch"
  ],
  headerWrapperStack: [
    "headerWrapperStack",
    "headerWrapperNav",
    "wrapperHome",
    "wrapperAbout",
    "wrapperThemeSwitch"
  ],
  headerWrapperNav: ["headerWrapperNav", "wrapperHome", "wrapperAbout"],
  wrapperHome: ["wrapperHome"],
  wrapperAbout: ["wrapperAbout"],
  wrapperThemeSwitch: ["wrapperThemeSwitch"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  headerWrapperContainer: "div";
  headerWrapperStack: "div";
  headerWrapperNav: "div";
  wrapperHome: typeof ContactButton;
  wrapperAbout: typeof ContactButton;
  wrapperThemeSwitch: typeof Switch;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeaderWrapper__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeaderWrapper__VariantsArgs;
    args?: PlasmicHeaderWrapper__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeaderWrapper__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeaderWrapper__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeaderWrapper__ArgProps,
          internalVariantPropNames: PlasmicHeaderWrapper__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeaderWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "headerWrapperContainer") {
    func.displayName = "PlasmicHeaderWrapper";
  } else {
    func.displayName = `PlasmicHeaderWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicHeaderWrapper = Object.assign(
  // Top-level PlasmicHeaderWrapper renders the root element
  makeNodeComponent("headerWrapperContainer"),
  {
    // Helper components rendering sub-elements
    headerWrapperStack: makeNodeComponent("headerWrapperStack"),
    headerWrapperNav: makeNodeComponent("headerWrapperNav"),
    wrapperHome: makeNodeComponent("wrapperHome"),
    wrapperAbout: makeNodeComponent("wrapperAbout"),
    wrapperThemeSwitch: makeNodeComponent("wrapperThemeSwitch"),

    // Metadata about props expected for PlasmicHeaderWrapper
    internalVariantProps: PlasmicHeaderWrapper__VariantProps,
    internalArgProps: PlasmicHeaderWrapper__ArgProps
  }
);

export default PlasmicHeaderWrapper;
/* prettier-ignore-end */
